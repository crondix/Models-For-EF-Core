
@inject IImageService ImageService
@rendermode InteractiveServer
@inject IHostEnvironment Environment
@inject ILogger<ImageView> Logger
@inject IWebHostEnvironment env

<div class="ImageView-container">
@if (status == "update" || status == "set")
{
        <div class="image-container">
   
    <img src="@Printer.image" />
    
    </div>
    <div>
        <p>
            <label>
                src:
                <InputSelect @bind-Value="@Printer.image" class="form-control">

                    @foreach (var image in getImageList())
                        {
                        <option value="image/@image" > @image</option>
                        }
                    }
                </InputSelect>
                @* <input list="browsers" id="myBrowser" name="myBrowser"  @bind=Printer.image />
                    <datalist id="browsers">
                  
                    @foreach (var image in getImageList())
                    {
                        <option value="image/@image"><img src="@image/image" /></option>
                    }

                    </datalist> *@
             
            </label>
        </p>
        <p>
            <label> 
                Max file size:@maxFileSize bytes

            </label>
        </p>

        <p>
            <label>
                Max allowed files:@maxAllowedFiles

            </label>
        </p>

        <p>
            <label>

                <InputFile OnChange="@LoadFiles" multiple />
            </label>
        </p>


       
        @if (isLoading)
        {
            <p>Uploading...</p>
        }
        else
        {
            if (loadedFiles.Count != 0)
            {

                <ul>
                    @foreach (var file in loadedFiles)
                    {
                        <li>
                            <ul>
                                <li>Name: @file.Name</li>
                                <li>Last modified: @file.LastModified.ToString()</li>
                                <li>Size (bytes): @file.Size</li>
                                <li>Content type: @file.ContentType</li>
                            </ul>
                        </li>
                    }
                </ul>
            }
        }

        <p>
            @message
        </p>



    </div>

}
else if (status == "get")
{
    <div class="image-container">
        <img src="@(Printer.image is null? "/image/not image.jpg" : Printer.image)" Style="width: 15rem;" />
        
    </div>
}
else
{
    <span>name not found</span>
}
<EditButton OnButtonClick="HandleButtonClick"></EditButton>
</div>



@code {


    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 104857600;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    private string? message;

    string[] getImageList()
    {

        return Directory.GetFiles($"{env.WebRootPath}/image").Select(Path.GetFileName).ToArray(); ;
    }
  



    [Parameter]
    public Printers Printer { get; set; }




    string status = "";

    [Parameter]
    public string Status
    {
        get
        {
            return status;
        }
        set
        {
            if (value == "get" || value == "set" || value == "update")
            {
                status = value;
            }
            else
            {
                status = "get";
            }
        }
    }

    string TempValue { get; set; }
    protected override void OnInitialized()
    {
        TempValue = Printer.image;


    }

    private void HandleButtonClick(string buttonType)
    {

        if (buttonType == "reset")
        {

            Printer.image = TempValue;
            Status = "get";
        }
        else
        {
            Status = buttonType;
        }


        // StateHasChanged(); // Важно вызвать StateHasChanged() после изменения статуса

    }

}
