@using MyModels.Models
@if (PropertyValue is not null)
{
@if (status == "update" || status == "set")
{
    <div class="@(PropertyName)_Container">
        <input type="number" id="@(PropertyName)_ResolutionWidth" name="@(PropertyName)_ResolutionWidth" size="6" required @bind="@PropertyValue.width">
    <span>x</span>
        <input type="number" id="@(PropertyName)_ResolutionHeight" name="@(PropertyName)_ResolutionHeight" size="6" required @bind="@PropertyValue.height">
        <span>@PropertyValue.units</span>
    </div>

}

else if (status == "get")
{
    <span>@(@PropertyValue.width)x@(@PropertyValue.height) @PropertyValue.units</span>


}
else 
{
    <span>resolution not found</span>
}
}
<EditButton OnButtonClick="HandleButtonClick"></EditButton>
@code {
    [Parameter]
    public object Object { get; set; }


    [Parameter]
    public string PropertyName { get; set; }

    private Resolution PropertyValue
    {

        get => ((Resolution)Object.GetType().GetProperty(PropertyName).GetValue(Object));
        set => Object.GetType().GetProperty(PropertyName).SetValue(Object, value);
    }

    string status = "";

    [Parameter]
    public string Status
    {
        get
        {
            return status;
        }
        set
        {
            if (value == "get" || value == "set" || value == "update")
            {
                status = value;
            }
            else
            {
                status = "get";
            }
        }
    }
    Resolution TempValue { get; set; }
    protected override void OnInitialized()
    {
        TempValue = PropertyValue;


    }

    private void HandleButtonClick(string buttonType)
    {

        if (buttonType == "reset")
        {

            PropertyValue = TempValue;
            Status = "get";
        }
        else
        {
            Status = buttonType;

        }


        // StateHasChanged(); // Важно вызвать StateHasChanged() после изменения статуса

    }
}
