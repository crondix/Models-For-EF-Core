@using MyModels.Models

@if (status == "update" || status == "set")
{
    <div class="product-characteristics-spec">
        <div class="product-characteristics__spec-title">
            <label for="Test">Модель картриджей:</label>
        </div>
        <div class="product-characteristics__spec-value">
            <div>
                <div>
                    <MultiSelect CheckedItems="Printer.CartridgeModels.Select(function => function.Cartridge_Models.Model).ToArray()" Items="CartridgeModels.Select(function => function.Model).ToArray()" SelectedItemsChanged="HandleSelectedItemsChanged"></MultiSelect>
                </div>

            </div>  <EditButton OnButtonClick="HandleButtonClick"></EditButton>
        </div>
    </div>
    

}
else if (status == "get")
{
    
    <div class="product-characteristics-spec">
        <div class="product-characteristics__spec-title">
            <label for="Test">Количество картриджей :</label>
        </div>
        <div class="product-characteristics__spec-value">
            @Printer.CartridgeModels.Count
        </div>
    </div>
    @foreach (var item in Printer.CartridgeModels)
    {
    <div class="product-characteristics-spec">
        <div class="product-characteristics__spec-title">
            <label for="Test">Модель картриджей:</label>
        </div>
        <div class="product-characteristics__spec-value">
            <div>
               
                    <span class="CheckedDeviceFunctions">@item.Cartridge_Models.Model</span>
              

            </div>  <EditButton OnButtonClick="HandleButtonClick"></EditButton>
        </div>
    </div>
        <div class="product-characteristics-spec">
            <div class="product-characteristics__spec-title">
                <label for="Test">Ресурс картриджа :</label>
            </div>
            <div class="product-characteristics__spec-value">
                @item.Cartridge_Models.PrintResource стр
            </div>
        </div> 
        <div class="product-characteristics-spec">
            <div class="product-characteristics__spec-title">
                <label for="Test">Перезаправляемый :</label>
            </div>
            <div class="product-characteristics__spec-value">
                @(item.Cartridge_Models.Refueling ?? false ? "да": "нет" ) 
            </div>
        </div>
        
    }
   


}
else
{
    <span>name not found</span>
}

@code {
    [Parameter]
    public Printers Printer { get; set; }


    [Parameter]
    public virtual ICollection<Cartridge_models> CartridgeModels { get; set; }


    string status = "";

    [Parameter]
    public string Status
    {
        get
        {
            return status;
        }
        set
        {
            if (value == "get" || value == "set" || value == "update")
            {
                status = value;
            }
            else
            {
                status = "get";
            }
        }
    }


    ICollection<Cartridge_modelsPrinters> TempValue { get; set; }


    private void HandleSelectionChange()
    {
        foreach (var item in CheckedDeviceFunctions)
        {
            if (!Printer.CartridgeModels.Any(df => df.Cartridge_Models.Model == item))
            {
                Printer.CartridgeModels.Add(new Cartridge_modelsPrinters() { Cartridge_Models = CartridgeModels.FirstOrDefault(p => p.Model == item), Printers = this.Printer });
            }
        }
        foreach (var item in Printer.CartridgeModels)
        {
            if (!CheckedDeviceFunctions.Contains(item.Cartridge_Models.Model))
            {
                Printer.CartridgeModels.Remove(item);
            }
        }

    }
    private void HandleButtonClick(string buttonType)
    {

        if (buttonType == "reset")
        {
            Printer.CartridgeModels = new List<Cartridge_modelsPrinters>();
            foreach (var item in TempValue)
            {
                Printer.CartridgeModels.Add(item);
            }
            // Printer.DeviceFunctions = TempValue;
            Status = "get";

        }
        else
        {
            Status = buttonType;

        }


        // StateHasChanged(); // Важно вызвать StateHasChanged() после изменения статуса

    }
    List<string> CheckedDeviceFunctions { get; set; }
    protected override void OnInitialized()
    {

        CheckedDeviceFunctions = Printer.CartridgeModels.Select(function => function.Cartridge_Models.Model).ToList();
        TempValue = new List<Cartridge_modelsPrinters>();
        foreach (var item in Printer.CartridgeModels)
        {
            TempValue.Add(item);
        }


    }
    private void HandleSelectedItemsChanged(List<string> updatedSelectedItems)
    {
        // Обработайте обновленные SelectedItems, которые пришли из дочернего компонента
        CheckedDeviceFunctions = updatedSelectedItems;
        HandleSelectionChange();
    }
}
