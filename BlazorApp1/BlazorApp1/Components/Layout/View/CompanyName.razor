@using MyModels.Models

@if (status == "update" || status == "set")
{
    <RadzenDropDown @ref=@radzenDropDown @bind-SearchText=SearchText FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                    Data=@companies TextProperty="name" ValueProperty="name" AllowClear="true" @bind-Value=Printer.Company_name.name Style="width: 100%; max-width: 400px;" />
    @* <RadzenLabel Text="@searchTextStatus" /> *@
}
else if (status == "get" )
{
    <span>@Printer.Company_name.name</span>
}
else
{
    <span>name not found</span>
}
<EditButton OnButtonClick="HandleButtonClick"></EditButton>
@code {
    [Parameter]
    public Printers Printer { get; set; }


    [Parameter]
    public virtual ICollection<Companies> companies { get; set; }
   

    string status="";

    [Parameter]
    public string Status
    {
        get
        {
            return status;
        }
        set
        {
            if(value=="get" || value=="set" || value=="update"){ 
                status = value;
            }
            else
            {
                status = "get";
            }
        }
    }
    RadzenDropDown<string> radzenDropDown;
    string searchTextStatus;
    string searchText = "";
    public string SearchText
    {
        get
        {
            return searchText;
        }
        set
        {
            searchText = value;
            searchTextStatus = $"Search text: {searchText}";
        }
    }
    protected override void OnInitialized()
    {
        
         SearchText = Printer.Company_name.name; 

    }
    private void HandleButtonClick(string buttonType)
    {
        Status = buttonType;
        StateHasChanged(); // Важно вызвать StateHasChanged() после изменения статуса
    }
}
